(()=>{"use strict";var e={249:(e,n,t)=>{t.d(n,{A:()=>s});var r=t(354),a=t.n(r),i=t(314),o=t.n(i)()(a());o.push([e.id,"* {\n    box-sizing: border-box;\n    margin: 0;\n    padding: 0;\n}\n\n\nbody {\n    display: flex;\n    min-height: 100vh;\n    padding: 1rem;\n    font-size: 1rem;\n}\n\ndiv.container {\n    display: flex;\n    align-items: center;\n    flex-direction: column;\n    background-color: rgb(220, 220, 220);\n    border-radius: 1rem;\n    margin: auto;\n    padding: 3rem;\n}\n\ndiv.container form {\n    display: grid;\n    grid-template-columns: repeat(2, minmax(auto, 300px));\n    grid-template-rows: repeat(3, 1fr);\n    height: 300px;\n    gap: 0 1.5rem;\n}\n\ndiv.container form div {\n    display: flex;\n    flex-direction: column;\n}\n\ninput:valid {\n    border: 2px solid black;\n}\n\n/* Class submitted will be added when form is submitted\n   If there's any invalid inputs, apply :invalid to it */\nform.submitted input:invalid:required {\n    border: 2px solid red;\n}\n\n/* This is the style of error messages */\n.error {\n    width: 100%;\n    padding: 0;\n\n    font-size: 80%;\n    color: white;\n    background-color: red;\n    border-radius: 0 0 5px 5px;\n    box-sizing: border-box;\n}\n\n.error.active {\n    padding: 0.3em;\n}","",{version:3,sources:["webpack://./src/styles/main.css"],names:[],mappings:"AAAA;IACI,sBAAsB;IACtB,SAAS;IACT,UAAU;AACd;;;AAGA;IACI,aAAa;IACb,iBAAiB;IACjB,aAAa;IACb,eAAe;AACnB;;AAEA;IACI,aAAa;IACb,mBAAmB;IACnB,sBAAsB;IACtB,oCAAoC;IACpC,mBAAmB;IACnB,YAAY;IACZ,aAAa;AACjB;;AAEA;IACI,aAAa;IACb,qDAAqD;IACrD,kCAAkC;IAClC,aAAa;IACb,aAAa;AACjB;;AAEA;IACI,aAAa;IACb,sBAAsB;AAC1B;;AAEA;IACI,uBAAuB;AAC3B;;AAEA;wDACwD;AACxD;IACI,qBAAqB;AACzB;;AAEA,wCAAwC;AACxC;IACI,WAAW;IACX,UAAU;;IAEV,cAAc;IACd,YAAY;IACZ,qBAAqB;IACrB,0BAA0B;IAC1B,sBAAsB;AAC1B;;AAEA;IACI,cAAc;AAClB",sourcesContent:["* {\n    box-sizing: border-box;\n    margin: 0;\n    padding: 0;\n}\n\n\nbody {\n    display: flex;\n    min-height: 100vh;\n    padding: 1rem;\n    font-size: 1rem;\n}\n\ndiv.container {\n    display: flex;\n    align-items: center;\n    flex-direction: column;\n    background-color: rgb(220, 220, 220);\n    border-radius: 1rem;\n    margin: auto;\n    padding: 3rem;\n}\n\ndiv.container form {\n    display: grid;\n    grid-template-columns: repeat(2, minmax(auto, 300px));\n    grid-template-rows: repeat(3, 1fr);\n    height: 300px;\n    gap: 0 1.5rem;\n}\n\ndiv.container form div {\n    display: flex;\n    flex-direction: column;\n}\n\ninput:valid {\n    border: 2px solid black;\n}\n\n/* Class submitted will be added when form is submitted\n   If there's any invalid inputs, apply :invalid to it */\nform.submitted input:invalid:required {\n    border: 2px solid red;\n}\n\n/* This is the style of error messages */\n.error {\n    width: 100%;\n    padding: 0;\n\n    font-size: 80%;\n    color: white;\n    background-color: red;\n    border-radius: 0 0 5px 5px;\n    box-sizing: border-box;\n}\n\n.error.active {\n    padding: 0.3em;\n}"],sourceRoot:""}]);const s=o},314:e=>{e.exports=function(e){var n=[];return n.toString=function(){return this.map((function(n){var t="",r=void 0!==n[5];return n[4]&&(t+="@supports (".concat(n[4],") {")),n[2]&&(t+="@media ".concat(n[2]," {")),r&&(t+="@layer".concat(n[5].length>0?" ".concat(n[5]):""," {")),t+=e(n),r&&(t+="}"),n[2]&&(t+="}"),n[4]&&(t+="}"),t})).join("")},n.i=function(e,t,r,a,i){"string"==typeof e&&(e=[[null,e,void 0]]);var o={};if(r)for(var s=0;s<this.length;s++){var d=this[s][0];null!=d&&(o[d]=!0)}for(var l=0;l<e.length;l++){var c=[].concat(e[l]);r&&o[c[0]]||(void 0!==i&&(void 0===c[5]||(c[1]="@layer".concat(c[5].length>0?" ".concat(c[5]):""," {").concat(c[1],"}")),c[5]=i),t&&(c[2]?(c[1]="@media ".concat(c[2]," {").concat(c[1],"}"),c[2]=t):c[2]=t),a&&(c[4]?(c[1]="@supports (".concat(c[4],") {").concat(c[1],"}"),c[4]=a):c[4]="".concat(a)),n.push(c))}},n}},354:e=>{e.exports=function(e){var n=e[1],t=e[3];if(!t)return n;if("function"==typeof btoa){var r=btoa(unescape(encodeURIComponent(JSON.stringify(t)))),a="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(r),i="/*# ".concat(a," */");return[n].concat([i]).join("\n")}return[n].join("\n")}},72:e=>{var n=[];function t(e){for(var t=-1,r=0;r<n.length;r++)if(n[r].identifier===e){t=r;break}return t}function r(e,r){for(var i={},o=[],s=0;s<e.length;s++){var d=e[s],l=r.base?d[0]+r.base:d[0],c=i[l]||0,u="".concat(l," ").concat(c);i[l]=c+1;var m=t(u),A={css:d[1],media:d[2],sourceMap:d[3],supports:d[4],layer:d[5]};if(-1!==m)n[m].references++,n[m].updater(A);else{var p=a(A,r);r.byIndex=s,n.splice(s,0,{identifier:u,updater:p,references:1})}o.push(u)}return o}function a(e,n){var t=n.domAPI(n);return t.update(e),function(n){if(n){if(n.css===e.css&&n.media===e.media&&n.sourceMap===e.sourceMap&&n.supports===e.supports&&n.layer===e.layer)return;t.update(e=n)}else t.remove()}}e.exports=function(e,a){var i=r(e=e||[],a=a||{});return function(e){e=e||[];for(var o=0;o<i.length;o++){var s=t(i[o]);n[s].references--}for(var d=r(e,a),l=0;l<i.length;l++){var c=t(i[l]);0===n[c].references&&(n[c].updater(),n.splice(c,1))}i=d}}},659:e=>{var n={};e.exports=function(e,t){var r=function(e){if(void 0===n[e]){var t=document.querySelector(e);if(window.HTMLIFrameElement&&t instanceof window.HTMLIFrameElement)try{t=t.contentDocument.head}catch(e){t=null}n[e]=t}return n[e]}(e);if(!r)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");r.appendChild(t)}},540:e=>{e.exports=function(e){var n=document.createElement("style");return e.setAttributes(n,e.attributes),e.insert(n,e.options),n}},56:(e,n,t)=>{e.exports=function(e){var n=t.nc;n&&e.setAttribute("nonce",n)}},825:e=>{e.exports=function(e){if("undefined"==typeof document)return{update:function(){},remove:function(){}};var n=e.insertStyleElement(e);return{update:function(t){!function(e,n,t){var r="";t.supports&&(r+="@supports (".concat(t.supports,") {")),t.media&&(r+="@media ".concat(t.media," {"));var a=void 0!==t.layer;a&&(r+="@layer".concat(t.layer.length>0?" ".concat(t.layer):""," {")),r+=t.css,a&&(r+="}"),t.media&&(r+="}"),t.supports&&(r+="}");var i=t.sourceMap;i&&"undefined"!=typeof btoa&&(r+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(i))))," */")),n.styleTagTransform(r,e,n.options)}(n,e,t)},remove:function(){!function(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e)}(n)}}}},113:e=>{e.exports=function(e,n){if(n.styleSheet)n.styleSheet.cssText=e;else{for(;n.firstChild;)n.removeChild(n.firstChild);n.appendChild(document.createTextNode(e))}}}},n={};function t(r){var a=n[r];if(void 0!==a)return a.exports;var i=n[r]={id:r,exports:{}};return e[r](i,i.exports,t),i.exports}t.n=e=>{var n=e&&e.__esModule?()=>e.default:()=>e;return t.d(n,{a:n}),n},t.d=(e,n)=>{for(var r in n)t.o(n,r)&&!t.o(e,r)&&Object.defineProperty(e,r,{enumerable:!0,get:n[r]})},t.o=(e,n)=>Object.prototype.hasOwnProperty.call(e,n),t.nc=void 0,(()=>{var e=t(72),n=t.n(e),r=t(825),a=t.n(r),i=t(659),o=t.n(i),s=t(56),d=t.n(s),l=t(540),c=t.n(l),u=t(113),m=t.n(u),A=t(249),p={};p.styleTagTransform=m(),p.setAttributes=d(),p.insert=o().bind(null,"head"),p.domAPI=a(),p.insertStyleElement=c(),n()(A.A,p),A.A&&A.A.locals&&A.A.locals;const v=document.querySelector("form"),f=document.getElementById("mail"),y=document.querySelector("#mail + span.error"),g=document.getElementById("confirm-mail"),h=document.querySelector("#confirm-mail + span.error"),C=document.getElementById("country"),b=document.getElementById("zipcode"),x=document.querySelector("#zipcode + span.error"),I=document.getElementById("password"),B=document.querySelector("#password + span.error"),w=document.getElementById("password-confirmation"),E=document.querySelector("#password-confirmation + span.error"),S=()=>{f.validity.valueMissing?y.textContent="You need to enter an email address.":f.validity.typeMismatch?y.textContent="Entered value needs to be an email address.":f.validity.tooShort&&(y.textContent=`Email should be at least ${f.minLength} characters`),y.className="error active"},T=()=>{const e={ch:["^(CH-)?\\d{4}$","Switzerland ZIPs must have exactly 4 digits: e.g. CH-1950 or 1950"],fr:["^(F-)?\\d{5}$","France ZIPs must have exactly 5 digits: e.g. F-75012 or 75012"],de:["^(D-)?\\d{5}$","Germany ZIPs must have exactly 5 digits: e.g. D-12345 or 12345"],nl:["^(NL-)?\\d{4}\\s*([A-RT-Z][A-Z]|S[BCE-RT-Z])$","Netherland ZIPs must have exactly 4 digits, followed by 2 letters except SA, SD and SS"],br:["(\\d{5})-?(\\d{3})","Brazilian ZIPs must have exactly 8 digits: e.g. 12345-678 or 12345678"]};if(new RegExp(e[C.value][0],"").test(b.value))x.textContent="",x.className="error";else{const n=e[C.value][1];x.textContent=n,x.className="error active"}},N=()=>{I.validity.valueMissing?B.textContent="You need to enter a password.":I.validity.tooShort&&(B.textContent=`Password should be at least ${I.minLength} characters; you entered ${I.value.length}`),B.className="error active"};f.addEventListener("focusout",(()=>{f.validity.valid?(y.textContent="",y.className="error"):S()})),b.addEventListener("input",T),C.addEventListener("change",T),I.addEventListener("input",(()=>{I.validity.valid?(B.textContent="",B.className="error"):N()})),v.addEventListener("submit",(e=>{e.preventDefault(),I.value!==w.value?w.setCustomValidity("Passwords do not match"):w.setCustomValidity(""),v.checkValidity()?(alert("Great! Your data was submitted to the server!"),v.reset(),v.classList.remove("submitted"),document.querySelectorAll("span").forEach((e=>{e.textContent="",e.classList.remove("error")}))):(v.classList.add("submitted"),f.validity.valid||S(),g.validity.valueMissing||f.value!==g.value?(g.validity.valueMissing?h.textContent="This field can't be empty!":g.value!==f.value&&(h.textContent="The confirmed email does not match the original email. Please check and try to submit again."),h.className="error active"):(h.textContent="",h.className="error"),I.validity.valid||N(),w.validity.valueMissing||I.value!==w.value?(w.validity.valueMissing?E.textContent="This field can't be empty!":I.value!==w.value&&(E.textContent="The confirmed password does not match the original password. Please check and try to submit again."),E.className="error active"):(E.textContent="",E.className="error"),b.validity.valid||T())}))})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,